import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { format } from 'date-fns';
import { User, UploadedFile } from '../types';

export const generatePDFReport = (
  file: UploadedFile,
  user: User,
  includeCharts: boolean = false
) => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;
  
  // Header
  doc.setFillColor(30, 64, 175);
  doc.rect(0, 0, pageWidth, 25, 'F');
  
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(20);
  doc.text('Data Analysis Report', 20, 17);
  
  doc.setTextColor(0, 0, 0);
  doc.setFontSize(12);
  
  // Report metadata
  doc.text(`Generated by: ${user.name}`, 20, 35);
  doc.text(`Company: ${user.company}`, 20, 42);
  doc.text(`Date: ${format(new Date(), 'PPP')}`, 20, 49);
  doc.text(`File: ${file.name}`, 20, 56);
  
  let currentY = 70;
  
  // Summary statistics
  if (file.summary) {
    doc.setFontSize(16);
    doc.text('Summary Statistics', 20, currentY);
    currentY += 10;
    
    doc.setFontSize(10);
    const summaryData = [
      ['Total Rows', file.summary.totalRows.toString()],
      ['Duplicates Removed', file.summary.duplicatesRemoved.toString()],
      ['Missing Values Handled', file.summary.missingValuesHandled.toString()],
      ['Columns', file.summary.columns.length.toString()],
      ['Numerical Columns', file.summary.numericalColumns.length.toString()],
      ['Categorical Columns', file.summary.categoricalColumns.length.toString()]
    ];
    
    autoTable(doc, {
      startY: currentY,
      head: [['Metric', 'Value']],
      body: summaryData,
      theme: 'striped',
      headStyles: { fillColor: [30, 64, 175] }
    });
    
    currentY = (doc as any).lastAutoTable.finalY + 15;
  }
  
  // Column statistics
  if (file.summary && Object.keys(file.summary.stats).length > 0) {
    doc.setFontSize(16);
    doc.text('Column Statistics', 20, currentY);
    currentY += 10;
    
    const statsData = Object.entries(file.summary.stats).map(([column, stats]) => [
      column,
      stats.min?.toFixed(2) || '',
      stats.max?.toFixed(2) || '',
      stats.average?.toFixed(2) || '',
      stats.unique?.toString() || '',
      stats.count?.toString() || ''
    ]);
    
    autoTable(doc, {
      startY: currentY,
      head: [['Column', 'Min', 'Max', 'Average', 'Unique', 'Count']],
      body: statsData,
      theme: 'striped',
      headStyles: { fillColor: [30, 64, 175] }
    });
    
    currentY = (doc as any).lastAutoTable.finalY + 15;
  }
  
  // Data preview (first 10 rows)
  if (file.processedData && file.processedData.length > 0) {
    doc.addPage();
    doc.setFontSize(16);
    doc.text('Data Preview (First 10 Rows)', 20, 20);
    
    const headers = Object.keys(file.processedData[0]);
    const rows = file.processedData.slice(0, 10).map(row => 
      headers.map(header => String(row[header] || ''))
    );
    
    autoTable(doc, {
      startY: 30,
      head: [headers],
      body: rows,
      theme: 'striped',
      headStyles: { fillColor: [30, 64, 175] },
      styles: { fontSize: 8 }
    });
  }
  
  // Footer
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.text(`Page ${i} of ${pageCount}`, pageWidth - 30, doc.internal.pageSize.height - 10);
  }
  
  doc.save(`${file.name}_report.pdf`);
};

export const generateCSVReport = (file: UploadedFile) => {
  if (!file.processedData || file.processedData.length === 0) return;
  
  const headers = Object.keys(file.processedData[0]);
  const csvContent = [
    headers.join(','),
    ...file.processedData.map(row => 
      headers.map(header => {
        const value = row[header];
        return typeof value === 'string' && value.includes(',') 
          ? `"${value}"` 
          : String(value);
      }).join(',')
    )
  ].join('\n');
  
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', `${file.name}_processed.csv`);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};